{"ast":null,"code":"// src/services/authService.js\nconst API_URL = 'http://localhost:8000/api/auth'; // Make sure this matches your backend URL\n\n// Register a new user\nexport const registerUser = async (email, password, confirmPassword, name, address, contactNo, referralCode) => {\n  try {\n    const response = await fetch(`${API_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password,\n        confirmPassword,\n        name,\n        // Combined name field\n        address,\n        contactNo,\n        // Renamed to match backend expectations\n        referralCode // Renamed to match backend expectations\n      })\n    });\n    const data = await response.json();\n    console.log('Response status:', response.status);\n    console.log('Response data:', data);\n    if (!response.ok) {\n      throw new Error(data.msg || 'Registration failed');\n    }\n\n    // Registration successful, return the JWT token\n    return data.token;\n  } catch (error) {\n    console.error('Error during registration:', error);\n    throw error;\n  }\n};\n\n// Login existing user\nexport const loginUser = async (email, password) => {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.msg || 'Login failed');\n    }\n\n    // Login successful, return the JWT token\n    return data.token;\n  } catch (error) {\n    console.error('Error during login:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","registerUser","email","password","confirmPassword","name","address","contactNo","referralCode","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","status","ok","Error","msg","token","error","loginUser"],"sources":["C:/Users/A K S Rathore/Desktop/QuickSell_v7.11_new/frontend/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\r\nconst API_URL = 'http://localhost:8000/api/auth';  // Make sure this matches your backend URL\r\n\r\n// Register a new user\r\nexport const registerUser = async (email, password, confirmPassword, name, address, contactNo, referralCode) => {\r\n\r\n  try {\r\n    const response = await fetch(`${API_URL}/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ \r\n        email, \r\n        password, \r\n        confirmPassword,\r\n        name,        // Combined name field\r\n        address,\r\n        contactNo,   // Renamed to match backend expectations\r\n        referralCode // Renamed to match backend expectations\r\n      })\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    console.log('Response status:', response.status);\r\n    console.log('Response data:', data);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.msg || 'Registration failed');\r\n    }\r\n\r\n    // Registration successful, return the JWT token\r\n    return data.token;\r\n  } catch (error) {\r\n    console.error('Error during registration:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Login existing user\r\nexport const loginUser = async (email, password) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ email, password })\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n      throw new Error(data.msg || 'Login failed');\r\n    }\r\n\r\n    // Login successful, return the JWT token\r\n    return data.token;\r\n  } catch (error) {\r\n    console.error('Error during login:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,gCAAgC,CAAC,CAAE;;AAEnD;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,IAAI,EAAEC,OAAO,EAAEC,SAAS,EAAEC,YAAY,KAAK;EAE9G,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,OAAO,WAAW,EAAE;MAClDW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBb,KAAK;QACLC,QAAQ;QACRC,eAAe;QACfC,IAAI;QAAS;QACbC,OAAO;QACPC,SAAS;QAAI;QACbC,YAAY,CAAC;MACf,CAAC;IACH,CAAC,CAAC;IAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAElCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEV,QAAQ,CAACW,MAAM,CAAC;IAChDF,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,IAAI,CAAC;IAEnC,IAAI,CAACP,QAAQ,CAACY,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACN,IAAI,CAACO,GAAG,IAAI,qBAAqB,CAAC;IACpD;;IAEA;IACA,OAAOP,IAAI,CAACQ,KAAK;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOxB,KAAK,EAAEC,QAAQ,KAAK;EAClD,IAAI;IACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,OAAO,QAAQ,EAAE;MAC/CW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEb,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,MAAMa,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,IAAI,CAACR,QAAQ,CAACY,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACN,IAAI,CAACO,GAAG,IAAI,cAAc,CAAC;IAC7C;;IAEA;IACA,OAAOP,IAAI,CAACQ,KAAK;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}