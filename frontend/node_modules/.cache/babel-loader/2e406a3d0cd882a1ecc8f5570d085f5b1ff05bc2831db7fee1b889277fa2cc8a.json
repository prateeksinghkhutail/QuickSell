{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\A K S Rathore\\\\Desktop\\\\QuickSell_v7.11_new\\\\frontend\\\\src\\\\components\\\\productList.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import ProductCard from \"./productCard\";\n\n// const ProductList = ({ searchQuery, category }) => {\n//   const [products, setProducts] = useState([]);\n//   const [filteredProducts, setFilteredProducts] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       try {\n//         let url = \"http://localhost:8000/api/products\";\n//         if (category) {\n//           url += `?category=${encodeURIComponent(category)}`;\n//         }\n//         const response = await fetch(url);\n\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! status: ${response.status}`);\n//         }\n//         const data = await response.json();\n//         console.log(data);\n//         setProducts(data);\n//         setFilteredProducts(data);\n//       } catch (error) {\n//         console.error(\"Failed to fetch products:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchProducts();\n//   }, []);\n\n//   useEffect(() => {\n//     if (searchQuery) {\n//       setFilteredProducts(\n//         products.filter((product) =>\n//           product.productName.toLowerCase().includes(searchQuery.toLowerCase())\n//         )\n//       );\n//     } else {\n//       setFilteredProducts(products);\n//     }\n//   }, [searchQuery, products]);\n\n//   if (loading) return <p className=\"text-center\">Loading products...</p>;\n\n//   return (\n//     <div className=\"p-6\">\n//       <div className=\"flex justify-between\"></div>\n\n//       <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8\">\n//         {filteredProducts.map((product) => (\n//           <ProductCard key={product._id} product={product} /> // Use product._id for MongoDB ObjectId\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ProductList;\n\nimport React, { useEffect, useState } from \"react\";\nimport ProductCard from \"./productCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductList = ({\n  searchQuery,\n  category\n}) => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/products\");\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n        setProducts(data);\n        setFilteredProducts(data);\n      } catch (error) {\n        console.error(\"Failed to fetch products:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProducts();\n  }, []);\n  useEffect(() => {\n    let filtered = products;\n\n    // Apply category filter if category is selected\n    if (category) {\n      filtered = filtered.filter(product => product.productType === category);\n    }\n\n    // Apply search filter if searchQuery is provided\n    if (searchQuery) {\n      filtered = filtered.filter(product => product.productName.toLowerCase().includes(searchQuery.toLowerCase()));\n    }\n    setFilteredProducts(filtered);\n  }, [searchQuery, category, products]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-center\",\n    children: \"Loading products...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8\",\n      children: filteredProducts.map(product => /*#__PURE__*/_jsxDEV(ProductCard, {\n        product: product\n      }, product._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this) // Use product._id for MongoDB ObjectId\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductList, \"3HpSEXiWB3IdDP4NFaiC8GgFZjM=\");\n_c = ProductList;\nexport default ProductList;\nvar _c;\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"names":["React","useEffect","useState","ProductCard","jsxDEV","_jsxDEV","ProductList","searchQuery","category","_s","products","setProducts","filteredProducts","setFilteredProducts","loading","setLoading","fetchProducts","response","fetch","ok","Error","status","data","json","console","log","error","filtered","filter","product","productType","productName","toLowerCase","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_id","_c","$RefreshReg$"],"sources":["C:/Users/A K S Rathore/Desktop/QuickSell_v7.11_new/frontend/src/components/productList.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import ProductCard from \"./productCard\";\r\n\r\n// const ProductList = ({ searchQuery, category }) => {\r\n//   const [products, setProducts] = useState([]);\r\n//   const [filteredProducts, setFilteredProducts] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const fetchProducts = async () => {\r\n//       try {\r\n//         let url = \"http://localhost:8000/api/products\";\r\n//         if (category) {\r\n//           url += `?category=${encodeURIComponent(category)}`;\r\n//         }\r\n//         const response = await fetch(url);\r\n\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! status: ${response.status}`);\r\n//         }\r\n//         const data = await response.json();\r\n//         console.log(data);\r\n//         setProducts(data);\r\n//         setFilteredProducts(data);\r\n//       } catch (error) {\r\n//         console.error(\"Failed to fetch products:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchProducts();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (searchQuery) {\r\n//       setFilteredProducts(\r\n//         products.filter((product) =>\r\n//           product.productName.toLowerCase().includes(searchQuery.toLowerCase())\r\n//         )\r\n//       );\r\n//     } else {\r\n//       setFilteredProducts(products);\r\n//     }\r\n//   }, [searchQuery, products]);\r\n\r\n//   if (loading) return <p className=\"text-center\">Loading products...</p>;\r\n\r\n//   return (\r\n//     <div className=\"p-6\">\r\n//       <div className=\"flex justify-between\"></div>\r\n\r\n//       <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8\">\r\n//         {filteredProducts.map((product) => (\r\n//           <ProductCard key={product._id} product={product} /> // Use product._id for MongoDB ObjectId\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ProductList;\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ProductCard from \"./productCard\";\r\n\r\nconst ProductList = ({ searchQuery, category }) => {\r\n  const [products, setProducts] = useState([]);\r\n  const [filteredProducts, setFilteredProducts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:8000/api/products\");\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setProducts(data);\r\n        setFilteredProducts(data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch products:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let filtered = products;\r\n\r\n    // Apply category filter if category is selected\r\n    if (category) {\r\n      filtered = filtered.filter((product) => product.productType === category);\r\n    }\r\n\r\n    // Apply search filter if searchQuery is provided\r\n    if (searchQuery) {\r\n      filtered = filtered.filter((product) =>\r\n        product.productName.toLowerCase().includes(searchQuery.toLowerCase())\r\n      );\r\n    }\r\n\r\n    setFilteredProducts(filtered);\r\n  }, [searchQuery, category, products]);\r\n\r\n  if (loading) return <p className=\"text-center\">Loading products...</p>;\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <div className=\"flex justify-between\"></div>\r\n\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8\">\r\n        {filteredProducts.map((product) => (\r\n          <ProductCard key={product._id} product={product} /> // Use product._id for MongoDB ObjectId\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,WAAW,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;QAElE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;QAC3D;QACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;QACjBX,WAAW,CAACW,IAAI,CAAC;QACjBT,mBAAmB,CAACS,IAAI,CAAC;MAC3B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD,CAAC,SAAS;QACRX,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAENf,SAAS,CAAC,MAAM;IACd,IAAI0B,QAAQ,GAAGjB,QAAQ;;IAEvB;IACA,IAAIF,QAAQ,EAAE;MACZmB,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACC,WAAW,KAAKtB,QAAQ,CAAC;IAC3E;;IAEA;IACA,IAAID,WAAW,EAAE;MACfoB,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAAEC,OAAO,IACjCA,OAAO,CAACE,WAAW,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC1B,WAAW,CAACyB,WAAW,CAAC,CAAC,CACtE,CAAC;IACH;IAEAnB,mBAAmB,CAACc,QAAQ,CAAC;EAC/B,CAAC,EAAE,CAACpB,WAAW,EAAEC,QAAQ,EAAEE,QAAQ,CAAC,CAAC;EAErC,IAAII,OAAO,EAAE,oBAAOT,OAAA;IAAG6B,SAAS,EAAC,aAAa;IAAAC,QAAA,EAAC;EAAmB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAEtE,oBACElC,OAAA;IAAK6B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB9B,OAAA;MAAK6B,SAAS,EAAC;IAAsB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAE5ClC,OAAA;MAAK6B,SAAS,EAAC,qEAAqE;MAAAC,QAAA,EACjFvB,gBAAgB,CAAC4B,GAAG,CAAEX,OAAO,iBAC5BxB,OAAA,CAACF,WAAW;QAAmB0B,OAAO,EAAEA;MAAQ,GAA9BA,OAAO,CAACY,GAAG;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAqB,CAAC,CAAC;MACrD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA1DIH,WAAW;AAAAoC,EAAA,GAAXpC,WAAW;AA4DjB,eAAeA,WAAW;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}